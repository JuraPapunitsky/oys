<script type="text/javascript">
        window.saleInsurancePremiumVals = {
            /* car[make] */
            1: {
                /* car[model] */
                1: {
                    title: "Focus",
                    /* car[type] */
                    type: {
                        1: "Легковые автомобили"
                    },
                    more: {
                        1: "#carEngine"
                    }
                },
                2: {
                    title: "Mondeo", /* car[type] */
                    type: {1: "Легковые автомобили", 5: "Прицепы и полуприцепы"},
                    more: {1: "#carEngine"}
                }
            },
            2: {
                1: {title: "Sportage", type: {1: "Легковые автомобили"}, more: {1: "#carEngine"}},
                2: {title: "Sorento", type: {1: "Легковые автомобили"}, more: {1: "#carEngine"}},
                3: {title: "Rio", type: {1: "Легковые автомобили"}, more: {1: "#carEngine"}}
            },
            3: {
                1: {title: "CL203", type: {1: "Легковые автомобили"}, more: {1: "#carEngine"}},
                2: {title: "Transporter", type: {3: "Автобус и микроавтобусы"}, more: {3: "#carSize"}}
            },
            4: {
                1: {title: "8C Spider", type: {1: "Легковые автомобили"}, more: {1: "#carEngine"}},
                2: {title: "Giulietta", type: {4: "Грузовые автомобили"}, more: {4: "#carWeight"}}
            }
        };


    </script>

    1: {
        1: {
            title: &quot;Mondeo&quot;,
            type: {
                1: &quot;Легковые автомобили&quot;,
                },
            more: {
                1: &quot;engine&quot;,
                 },
                },
        3: {
            title: &quot;Focus&quot;,
            type: {1: &quot;Легковые автомобили&quot;,},
            more: {1: &quot;engine&quot;,},
            },
        },
    2: {4: { title: &quot;Rio&quot;, type: {1: &quot;Легковые автомобили&quot;,}, more: {1: &quot;engine&quot;,},},5: { title: &quot;Sportage&quot;, type: {1: &quot;Легковые автомобили&quot;,}, more: {1: &quot;engine&quot;,},},6: { title: &quot;Sorento&quot;, type: {1: &quot;Легковые автомобили&quot;,}, more: {1: &quot;engine&quot;,},},},3: {7: { title: &quot;CL203&quot;, type: {1: &quot;Легковые автомобили&quot;,}, more: {1: &quot;engine&quot;,},},8: { title: &quot;Transporter&quot;, type: {3: &quot;Автобус и микроавтобусы&quot;,}, more: {3: &quot;seats&quot;,},},},4: {9: { title: &quot;8C Spider&quot;, type: {1: &quot;Легковые автомобили&quot;,}, more: {1: &quot;engine&quot;,},},10: { title: &quot;Giulietta&quot;, type: {4: &quot;Грузовые автомобили&quot;,}, more: {4: &quot;capacity&quot;,},},},



    class ClientData(models.Model):
    registration_numbe = models.CharField(max_length=200)
    car_manufacturer = models.ForeignKey(CarManufacturer)
    car_model = models.ForeignKey(CarModel)
    car_type = models.ForeignKey(TransportType)
    car_engine = models.FloatField(max_length=20)
    car_size = models.FloatField(max_length=200)
    car_weight = models.FloatField(max_length=20)
    person_type = models.ForeignKey(PersonType)
    pin_code = models.CharField(max_length=20)
    driver_license_series = models.CharField(max_length=20)
    driver_license_number = models.CharField(max_length=20)
    start_date = models.DateField()
    territory = models.ForeignKey(Territory)
    phone = models.CharField(max_length=20)
    email = models.EmailField()
    prem = models.FloatField(10)

    def set_premium(self):
        self.prem = self.car_type.premium + self.get_engine_premium() + self.get_size_premium() + self.get_weight_premium();

    def get_engine_premium(self):
        if self.car_engine == 0:
            return 0

        for engine_capasity in EngineCapacity.objects.all():
            if self.car_engine <= engine_capasity.tag_value:
                return engine_capasity.premium
            elif self.car_engine > 5000 and engine_capasity.tag_value == 1:
                return engine_capasity.premium

    def get_size_premium(self):
        if self.car_size == 0:
            return 0
        for passangers_seats in PassengerSeats.objects.all():
            if self.car_size <= passangers_seats.tag_value:
                return passangers_seats.premium
            elif passangers_seats.tag_value == 1:
                return passangers_seats.premium

    def get_weight_premium(self):
        if self.car_weight == 0:
            return 0
        for bearing_capacity in BearingCapacity.objects.all():
            if self.car_weight <= bearing_capacity.tag_value:
                return bearing_capacity.premium
            elif bearing_capacity.tag_value == 1:
                return bearing_capacity.premium